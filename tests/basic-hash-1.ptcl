
type index;
fun tpl(Message, Message):Message

type session

fun hash(Message, Message):Message
fun verify(Message, Message, Message):Bool

fun sel1of2(Message):Message;
fun sel2of2(Message):Message
fun ok:Message
fun ko:Message

/* the Names */
fun nt(session, index): Name
fun nr(session): Name
fun key(index):Name

let mcond!(i:session, j:index, in:Message) =
    verify(
        sel2of2(in),
        sel1of2(in),
        key(j)
    )

step reader(i:session, j:index)
    { mcond!(i, j, in) }
    { ok }

step reader_fail(i:session)
    { not(exists (j:index) {mcond!(i, j, in)}) }
    { ko }

step tag(i:session, j:index)
    { true }
    { tpl(
        nt(i,j),
        hash(
            nt(i,j),
            key(j)
        )
    )}

assert
    forall (m1:Message, m2:Message) {
        (
            (m1 == sel1of2(tpl(m1,m2)))
            && (m2 == sel2of2(tpl(m1,m2)))
        )
    }

assert
    forall (s:Message, m:Message, k:Message) {
        (verify(s, m, k) <=> (s == hash(m, k)))
    }

order forall (i:session, j:index)
    { reader_fail(i) <> reader(i, j) }

order forall (i:session, j:index, j2:index)
    { reader(i, j2) <> reader(i, j) }

let conclusion!(i:session, j:index) = exists (k:session) {
    let m_in: Message = input(reader(i, j)) in 
    (lt(tag(k, j), reader(i, j))
    && (sel1of2(msg!(tag(k, j))) == sel1of2(m_in))
    && (sel2of2(msg!(tag(k, j))) == sel2of2(m_in))
)}

let premise!(i:session, j:index) =  cond!(reader(i, j))

query forall (i:session, j:index) {(
    happens(reader(i, j))
        => (conclusion!(i, j) <=> premise!(i, j))
)}

assert-crypto euf-cma hash verify;
assert-crypto nonce;