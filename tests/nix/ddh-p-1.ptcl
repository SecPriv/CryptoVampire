type index;
fun tpl(Message, Message):Message

type session


fun mfst(Message):Message;
fun msnd(Message):Message
fun ok:Message
fun ko:Message

fun mexp(Message, Message):Message

/* the Names */
fun skP: Name
fun skS: Name
fun a(index):Name
fun b(index):Name
fun k(index, index):Name

fun g:Message

fun sign(Message, Message):Message
fun checksign(Message, Message, Message):Bool
fun pk(Message):Message

step Pchall1(i:index){true} { tpl(pk(skP), mexp(g, a(i))) }

let pkS!(i:index) = mfst(mfst(input(Pchall2(i))))
let gS!(i:index) = msnd(mfst(input(Pchall2(i))))

step Pchall2(i:index)
    {( cond!(Pchall1(i)) &&
        checksign(
                msnd(input(Pchall2(i))),
                tpl( 
                    tpl( 
                        mexp(g, a(i)), 
                        gS!(i) 
                    ),
                    pk(skP)
                ),
                pkS!(i)
            )
        && ( pkS!(i) == pk(skS) )
    )}
    {
        sign(
            tpl(
                tpl(
                    gS!(i),
                    mexp(g, a(i))
                ),
                pkS!(i)
            ),
            skP
        )
    }

let pchall3_cond!(i:index, j:index) = (gS!(i) == mexp(g, b(j)))

step Pchall3(i:index, j:index) {(
    cond!(Pchall2(i)) && pchall3_cond!(i, j)
)} {
    mexp(mexp(g, a(i)), b(j))
}

step Pchall3bis(i:index) {(
    cond!(Pchall2(i)) && not(exists (j:index) {pchall3_cond!(i, j)})
)} { ko}

order forall(i:index) { Pchall1(i) < Pchall2(i)}
order forall(i:index, j:index) { Pchall2(i) < Pchall3(i, j)}
order forall(i:index) { Pchall2(i) < Pchall3bis(i)}
order forall(i:index, j:index, j2:index) { Pchall3(i, j) <> Pchall3(i, j2)}
order forall(i:index, j:index) { Pchall3(i, j) <> Pchall3bis(i)}

step S1(j:index) 
    {(mfst(input(S1(j))) == pk(skP))}
    {tpl(
        tpl(
            pk(skS),
            mexp(g, b(j))
        ),
        sign(
            tpl(
                tpl(
                    msnd(input(S1(j))),
                    mexp(g, b(j))
                ),
                mfst(input(S1(j)))
            ),
            skS
        )
    )}

step S2(j:index)
    {( cond!(S1(j)) &&  
        checksign(
            input(S2(j)),
            tpl(
                tpl(
                    mexp(g, b(j)),
                    msnd(input(S1(j)))
                ),
                pk(skS)
            ),
            mfst(input(S1(j)))
        )
    )} {ok}
order forall (j:index) { S1(j) < S2(j) }

assert
    forall (m1:Message, m2:Message) {
        (
            (m1 == mfst(tpl(m1,m2))) 
            && (m2 == msnd(tpl(m1,m2)))
        )
    }

assert-crypto euf-cma sign checksign pk;
assert-crypto nonce;

/* required to trigger the heuristic */
/* but never proven nor asserted */
/*lemma forall (i:index) {
    (cond!(Pchall2(i)) <=> (checksign(
                msnd(input(Pchall2(i))),
                tpl( 
                    tpl( 
                        mexp(g, a(i)), 
                        gS!(i) 
                    ),
                    pk(skP)
                ),
                pk(skS))
                && ( mfst(mfst(input(Pchall2(i)))) == pk(skS) ) 
                ))
}*/

/* P_charac */
query forall (i:index) {(
    happens(Pchall2(i)) => 
        (cond!(Pchall2(i)) =>
            exists (j:index) {(msnd(mfst(input(Pchall2(i)))) == mexp(g, b(j)))})
)}