file = {SOI ~ ( content
        ~ EOL?)+  ~ EOI}
content = { declaration | step | assertion
            | order | query | lemma
            | assertion_crypto
            | mlet }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ c_like_comments | ml_like_comments }
c_like_comments = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
ml_like_comments = _{ "(*" ~ (!"*)" ~ ANY)* ~ "*)" }
EOL = _{";"}

ident = @{  LETTER ~ ( ASCII_ALPHANUMERIC | LETTER | "_" | "-" | "'" )* }
underscore = {"_"}


type_name = ${ident}
macro_name = ${ ident ~ "!"}
function = ${ident}
variable = ${underscore? ~ ident}
step_name = ${ident}
operation = { eq | neq | or | and | implies | iff }
    hard_eq = { "===" }
    eq = { "==" }
    neq = { "!=" | "<>" }
    or = { "||" }
    and = { "&&" }
    implies = {"=>"}
    iff = {"<=>"}

typed_arguments = {("(" ~ (variable_binding ~ ",")* ~ variable_binding? ~ ")")?}
    variable_binding = {variable ~ ":" ~ type_name }

commun_base = { let_in | if_then_else | find_such_that | quantifier | macro_application | application  }
term = { /* "(" ~ inner_term ~ ")" | */  inner_term }
    inner_term = { commun_base | infix_term}
bracketed_term = _{"{" ~ term ~ "}"}

infix_term = {"(" ~ term ~ (operation ~ term)+ ~ ")" }
    // inner_infix_term = { commun_base ~ infix_term }

application = {(function | variable) ~ inner_application?}
    inner_application = _{(  "(" ~ inner_inner_application ~")"  ) | ("[" ~ inner_inner_application ~ "]") }
    inner_inner_application = _{(term ~ ",")* ~ term?}
macro_application = {macro_name ~ inner_application?}
if_then_else = {"if" ~ term ~ bracketed_term ~ "else" ~ bracketed_term}
find_such_that = {"try" ~ "find" ~
                    typed_arguments ~
                    "such" ~ "that"  ~ bracketed_term ~
                    "then" ~ bracketed_term ~
                    "else" ~ bracketed_term}
let_in = {"let" ~ variable_binding ~ "=" ~ term ~ "in" ~ term}

quantifier = {quantifier_op ~ typed_arguments ~ bracketed_term }
    quantifier_op = {exists | forall }
	forall = {"forall" | "∀" }
    exists = {"exists" | "∃" }

declaration = { declare_type | declare_function | declare_cell}
    declare_type = {"type" ~ type_name ~ options? }
    declare_function = {"fun" ~ function ~ declare_function_args ~
                            ":" ~ type_name ~ options? }
        declare_function_args = {("(" ~ (type_name ~ ",")* ~ type_name? ~ ")")?}
    declare_cell = {"cell" ~ function ~ declare_function_args ~
                            ":" ~ type_name ~ options?}

step = {"step" ~ step_name ~ typed_arguments ~
        bracketed_term ~
        bracketed_term ~
        assignements? ~ options?}
    assignement = {typed_arguments ~ application ~ "<-" ~ term}
    assignements= {"{" ~ (assignement ~ ",")* ~ assignement? ~ "}"}

assertion = {"assert" ~ assertion_inner }
    assertion_inner = { term ~ options? }

assertion_crypto = {"assert-crypto" ~ ident ~ function* ~ options?}

query = {"query" ~ assertion_inner }

lemma = {"lemma" ~ assertion_inner }

order = {"order" ~ quantifier_op ~ typed_arguments ~
    (inner_order | "{" ~ inner_order ~ "}")  ~ options?}
    inner_order = _{order_guard? ~ term ~ ordering_operation ~ term}
    ordering_operation = { order_incompatible | order_lt | order_gt }
        order_incompatible = {"<>"}
        order_lt = { "<" }
        order_gt = { ">" }
    order_guard = { term ~ implies }

mlet = {"let" ~ macro_name ~ typed_arguments ~ "=" ~ term ~ options? }

options = {"[" ~ ident * ~ "]"}